# Create the global study map


import matplotlib.pyplot as plt
import matplotlib.patches as patches

# Plotting the regions with different colors based on count
fig, ax = plt.subplots(1, 1, figsize=(12, 8))
merged.boundary.plot(ax=ax, linewidth=0.5, color='white')  # Draw boundaries

# Color regions based on 'Count' using a colormap without automatic legend
merged_plot = merged.plot(column='Count', ax=ax, cmap='cool', 
                          missing_kwds={'color': 'lightgrey'})  # Missing regions will be light grey

# Create a color bar manually to avoid auto legend issues
sm = plt.cm.ScalarMappable(cmap='cool', norm=plt.Normalize(vmin=merged['Count'].min(), vmax=merged['Count'].max()))
sm.set_array([])  # Only needed for older versions of Matplotlib
cbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.02)  # Decreased pad for spacing
cbar.set_label('Count by Region')

# Add counts to the regions
for x, y, label, region in zip(merged.geometry.centroid.x, merged.geometry.centroid.y, merged['Count'], merged['REGION']):
    if region == 'Northern America':
        # Adjust the position of Northern America count
        ax.annotate(f'{int(label)}', xy=(x, y + 1), ha='left', va='bottom', fontsize=12, color='black', fontweight='bold')
    else:
        ax.annotate(f'{int(label)}', xy=(x, y), ha='center', fontsize=11, color='Black')

# Title and layout adjustments
plt.title('')
plt.axis('off')  # Turn off the axis

# Adjust spacing
plt.subplots_adjust(top=1.5, bottom=0.1)  # You can tweak these values


# Add north arrow
ax.annotate('N', xy=(0.9, 0.95), xycoords='axes fraction', ha='center', va='center', fontsize=14, fontweight='bold', color='black',
            bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.3'))

plt.show()

# Stacked horizontal bar chart of the extreme events by event origin type

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from matplotlib.patches import Patch


# Load the Excel file
file_path = r"C:\Users\n12082856\OneDrive - Queensland University of Technology\Documents\conceptual_framework_cleaned_data.xlsx"
df = pd.read_excel(file_path)

# Combine specified values in the 'event' column
df['event'] = df['event'].replace({
    'Other: Hail storm': 'Other',
    'Other: Coral bleaching event': 'Other',
    'Drought; Heatwave': 'Drought'
})

# Group by 'event' and 'origin', then count occurrences
grouped_data = df.groupby(['event', 'origin']).size().unstack(fill_value=0)

# Define custom colors for origins
colors = {'Environmental': 'green', 'Social': 'orange', 'Economic': 'gray'}

# Plotting with transparency
ax = grouped_data.plot(kind='barh', stacked=True, figsize=(10, 7), 
                       color=[colors[col] for col in grouped_data.columns], alpha=0.5)

# Remove decimal points from x-axis
ax.xaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))

# Adding labels and title
ax.set_xlabel('Total Count')
ax.set_ylabel('Event')
ax.set_title('')

# Create custom legend
handles = [Patch(color=colors['Environmental'], label='Environmental'),
           Patch(color=colors['Social'], label='Social'),
           Patch(color=colors['Economic'], label='Economic')]  # Add Economic

ax.legend(handles=handles, title='Origin')


# Add total count labels inside the bars
for i, event in enumerate(grouped_data.index):
    totals = grouped_data.loc[event]
    cumulative_width = 0
    for origin, count in totals.items():
        if count > 0:  # Only place text for non-zero counts
            ax.text(cumulative_width + count / 2, i, str(count), 
                    ha='left', va='center', color='black', fontsize=10)
        cumulative_width += count

for spine in ax.spines.values():
    spine.set_visible(False)

# Set y-axis ticks to be empty but keep the labels
ax.yaxis.set_tick_params(length=0)  # Remove ticks but keep labels

# Hide the x-axis and its values
ax.xaxis.set_visible(False)

# Show the plot
plt.show()

# Stacked horizontal bar chart of positive/negative impacts by ecosystem service type

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from matplotlib.patches import Patch


# Load the Excel file
file_path = r"C:\Users\n12082856\OneDrive - Queensland University of Technology\Chapter 1 Conceptual Framework R Data and Graphs\displayr_data.xlsx"
df = pd.read_excel(file_path)

# Combine specified values in the 'event' column
df['event'] = df['event'].replace({
    'Other: Hail storm': 'Other',
    'Other: Coral bleaching event': 'Other',
    'Drought; Heatwave': 'Drought'
})

# Group by 'event' and 'origin', then count occurrences
grouped_data = df.groupby(['ES', 'PN']).size().unstack(fill_value=0)

# Define custom colors for origins
colors = {'Negative': 'red', 'Positive': 'blue'}

# Plotting with transparency
ax = grouped_data.plot(kind='barh', stacked=True, figsize=(10, 7), 
                       color=[colors[col] for col in grouped_data.columns], alpha=0.3)

# Remove decimal points from x-axis
ax.xaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))

# Remove the title of the legend
ax.get_legend().set_title(None)

# Adding labels and title
ax.set_xlabel('Total Count')
ax.set_ylabel('Ecosystem Service')
ax.set_title('')




# Add total count labels inside the bars
for i, event in enumerate(grouped_data.index):
    totals = grouped_data.loc[event]
    cumulative_width = 0
    for origin, count in totals.items():
        if count > 0:  # Only place text for non-zero counts
            ax.text(cumulative_width + count / 2, i, str(count), 
                    ha='left', va='center', color='black', fontsize=10)
        cumulative_width += count

for spine in ax.spines.values():
    spine.set_visible(False)

# Set y-axis ticks to be empty but keep the labels
ax.yaxis.set_tick_params(length=0)  # Remove ticks but keep labels

# Hide the x-axis and its values
ax.xaxis.set_visible(False)

# Show the plot
plt.show()

# Impact type by type of ecosystem service impacted

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import matplotlib.cm as cm

# Load the Excel file
file_path = r"C:\Users\n12082856\OneDrive - Queensland University of Technology\Chapter 1 Conceptual Framework R Data and Graphs\displayr_data.xlsx"
df = pd.read_excel(file_path)

# Combine specified values in the 'event' column
df['event'] = df['event'].replace({
    'Other: Hail storm': 'Other',
    'Other: Coral bleaching event': 'Other',
    'Drought; Heatwave': 'Drought'
})

# Group by 'event' and 'origin', then count occurrences
grouped_data = df.groupby(['ES', 'Impact']).size().unstack(fill_value=0)

# Define colors using the viridis colormap
inferno = cm.get_cmap('inferno', len(grouped_data.columns))
colors = [inferno(i) for i in range(inferno.N)]

# Create a mapping for abbreviations
impact_abbreviations = {
    'Direct impact on Demand; Direct impact on Flow': 'Demand & Flow',
    'Direct impact on Demand; Indirect impact on Demand': 'Demand & Indirect',
    'Direct impact on Supply': 'Direct Supply',
    'Direct impact on Supply; Direct impact on Demand': 'Supply & Demand',
    'Direct impact on Supply; Direct impact on Demand; Direct impact on Flow': 'Supply & Demand & Flow',
    'Direct impact on Supply; Direct impact on Demand; Indirect impact on Demand': 'Supply & Demand & Indirect',
    'Direct impact on Supply; Indirect impact on Supply': 'Indirect Supply',
    'Direct impact on Supply; Indirect impact on Supply; Direct impact on Demand; Indirect impact on Demand': 'Complex Indirect',
    'Direct impact on Supply; Indirect impact on Supply; Indirect impact on Demand': 'Indirect Complex'
}

# Plotting with transparency
ax = grouped_data.plot(kind='barh', stacked=True, figsize=(10, 7), 
                       color=colors, alpha=0.6)

# Remove decimal points from x-axis
ax.xaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))

# Adding labels and title
ax.set_xlabel('Total Count')
ax.set_ylabel('Ecosystem Service')
ax.set_title('Impact by Ecosystem Service')

# Add total count labels inside the bars
for i, event in enumerate(grouped_data.index):
    totals = grouped_data.loc[event]
    cumulative_width = 0
    for origin, count in totals.items():
        if count > 0:  # Only place text for non-zero counts
            ax.text(cumulative_width + count / 2, i, str(count), 
                    ha='center', va='center', color='white', fontsize=10)  # Center the text
        cumulative_width += count

# Remove black lines around the figure
for spine in ax.spines.values():
    spine.set_visible(False)

# Set y-axis ticks to be empty but keep the labels
ax.yaxis.set_tick_params(length=0)  # Remove ticks but keep labels

# Create a custom legend
handles = [plt.Rectangle((0, 0), 1, 1, color=colors[i]) for i in range(len(grouped_data.columns))]
ax.legend(handles, [impact_abbreviations[col] for col in grouped_data.columns], loc='upper right', fontsize='small')

# Show the plot
plt.show()

# Impact type by type of extreme event

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import matplotlib.cm as cm

# Load the Excel file
file_path = r"C:\Users\n12082856\OneDrive - Queensland University of Technology\Chapter 1 Conceptual Framework R Data and Graphs\displayr_data.xlsx"
df = pd.read_excel(file_path)

# Combine specified values in the 'event' column
df['event'] = df['event'].replace({
    'Other: Hail storm': 'Other',
    'Other: Coral bleaching event': 'Other',
    'Drought; Heatwave': 'Drought'
})

# Group by 'event' and 'origin', then count occurrences
grouped_data = df.groupby(['event', 'Impact']).size().unstack(fill_value=0)

# Define colors using the viridis colormap
inferno = cm.get_cmap('inferno', len(grouped_data.columns))
colors = [inferno(i) for i in range(inferno.N)]

# Create a mapping for abbreviations
impact_abbreviations = {
    'Direct impact on Demand; Direct impact on Flow': 'Demand & Flow',
    'Direct impact on Demand; Indirect impact on Demand': 'Demand & Indirect',
    'Direct impact on Supply': 'Direct Supply',
    'Direct impact on Supply; Direct impact on Demand': 'Supply & Demand',
    'Direct impact on Supply; Direct impact on Demand; Direct impact on Flow': 'Supply & Demand & Flow',
    'Direct impact on Supply; Direct impact on Demand; Indirect impact on Demand': 'Supply & Demand & Indirect',
    'Direct impact on Supply; Indirect impact on Supply': 'Indirect Supply',
    'Direct impact on Supply; Indirect impact on Supply; Direct impact on Demand; Indirect impact on Demand': 'Complex Indirect',
    'Direct impact on Supply; Indirect impact on Supply; Indirect impact on Demand': 'Indirect Complex'
}

# Plotting with transparency
ax = grouped_data.plot(kind='barh', stacked=True, figsize=(10, 7), 
                       color=colors, alpha=0.6)

# Remove decimal points from x-axis
ax.xaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))

# Adding labels and title
ax.set_xlabel('Total Count')
ax.set_ylabel('Event')
ax.set_title('Impact by Event')

# Add total count labels inside the bars
for i, event in enumerate(grouped_data.index):
    totals = grouped_data.loc[event]
    cumulative_width = 0
    for origin, count in totals.items():
        if count > 0:  # Only place text for non-zero counts
            ax.text(cumulative_width + count / 2, i, str(count), 
                    ha='center', va='center', color='white', fontsize=10)  # Center the text
        cumulative_width += count

# Remove black lines around the figure
for spine in ax.spines.values():
    spine.set_visible(False)

# Set y-axis ticks to be empty but keep the labels
ax.yaxis.set_tick_params(length=0)  # Remove ticks but keep labels

# Create a custom legend
handles = [plt.Rectangle((0, 0), 1, 1, color=colors[i]) for i in range(len(grouped_data.columns))]
ax.legend(handles, [impact_abbreviations[col] for col in grouped_data.columns], loc='upper right', fontsize='small')

# Show the plot
plt.show()



